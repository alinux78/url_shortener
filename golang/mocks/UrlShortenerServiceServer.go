// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/alinux78/ulrshortener/internal/service/api/proto"
	mock "github.com/stretchr/testify/mock"
)

// UrlShortenerServiceServer is an autogenerated mock type for the UrlShortenerServiceServer type
type UrlShortenerServiceServer struct {
	mock.Mock
}

// Resolve provides a mock function with given fields: _a0, _a1
func (_m *UrlShortenerServiceServer) Resolve(_a0 context.Context, _a1 *proto.UrlResolveRequest) (*proto.UrlResolveResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 *proto.UrlResolveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UrlResolveRequest) (*proto.UrlResolveResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UrlResolveRequest) *proto.UrlResolveResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UrlResolveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UrlResolveRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shorten provides a mock function with given fields: _a0, _a1
func (_m *UrlShortenerServiceServer) Shorten(_a0 context.Context, _a1 *proto.UrlShortenRequest) (*proto.UrlShortenResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Shorten")
	}

	var r0 *proto.UrlShortenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UrlShortenRequest) (*proto.UrlShortenResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UrlShortenRequest) *proto.UrlShortenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UrlShortenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UrlShortenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUrlShortenerServiceServer provides a mock function with given fields:
func (_m *UrlShortenerServiceServer) mustEmbedUnimplementedUrlShortenerServiceServer() {
	_m.Called()
}

// NewUrlShortenerServiceServer creates a new instance of UrlShortenerServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlShortenerServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlShortenerServiceServer {
	mock := &UrlShortenerServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
