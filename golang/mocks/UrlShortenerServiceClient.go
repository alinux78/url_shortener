// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/alinux78/ulrshortener/internal/service/api/proto"
)

// UrlShortenerServiceClient is an autogenerated mock type for the UrlShortenerServiceClient type
type UrlShortenerServiceClient struct {
	mock.Mock
}

// Resolve provides a mock function with given fields: ctx, in, opts
func (_m *UrlShortenerServiceClient) Resolve(ctx context.Context, in *proto.UrlResolveRequest, opts ...grpc.CallOption) (*proto.UrlResolveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 *proto.UrlResolveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UrlResolveRequest, ...grpc.CallOption) (*proto.UrlResolveResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UrlResolveRequest, ...grpc.CallOption) *proto.UrlResolveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UrlResolveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UrlResolveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shorten provides a mock function with given fields: ctx, in, opts
func (_m *UrlShortenerServiceClient) Shorten(ctx context.Context, in *proto.UrlShortenRequest, opts ...grpc.CallOption) (*proto.UrlShortenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Shorten")
	}

	var r0 *proto.UrlShortenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UrlShortenRequest, ...grpc.CallOption) (*proto.UrlShortenResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UrlShortenRequest, ...grpc.CallOption) *proto.UrlShortenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UrlShortenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UrlShortenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUrlShortenerServiceClient creates a new instance of UrlShortenerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlShortenerServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlShortenerServiceClient {
	mock := &UrlShortenerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
